import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    keyboard = [
        ["üïê –í—Ä–µ–º—è", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],
        ["üéÆ –ò–≥—Ä—ã", "üìä –ò–Ω—Ñ–æ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø–æ–º–æ—â—å\n/menu - –º–µ–Ω—é",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å  
/menu - –º–µ–Ω—é
/time - –≤—Ä–µ–º—è
/game - –∏–≥—Ä—ã
"""
    await update.message.reply_text(help_text)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üïê –í—Ä–µ–º—è", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],
        ["üéÆ –ò–≥—Ä—ã", "üìä –ò–Ω—Ñ–æ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    await update.message.reply_text(f"–°–µ–π—á–∞—Å: {current_time}")

async def game_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess")],
        [InlineKeyboardButton("‚úÇÔ∏è –ö–ù–ë", callback_data="game_rps")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    
    if text == "üïê –í—Ä–µ–º—è":
        await time_command(update, context)
    
    elif text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        keyboard = [
            ["7", "8", "9", "/"],
            ["4", "5", "6", "*"], 
            ["1", "2", "3", "-"],
            ["0", "C", "=", "+"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:", reply_markup=reply_markup)
    
    elif text == "üéÆ –ò–≥—Ä—ã":
        await game_command(update, context)
    
    elif text == "üìä –ò–Ω—Ñ–æ":
        await update.message.reply_text(f"–¢–≤–æ–π ID: {user.id}\n–ò–º—è: {user.first_name}")
    
    elif text in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "+", "-", "*", "/"]:
        if 'calc' not in context.user_data:
            context.user_data['calc'] = ""
        context.user_data['calc'] += text
        await update.message.reply_text(f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: {context.user_data['calc']}")
    
    elif text == "=":
        if 'calc' in context.user_data:
            try:
                result = eval(context.user_data['calc'])
                await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                context.user_data['calc'] = ""
            except:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
                context.user_data['calc'] = ""
    
    elif text == "C":
        context.user_data['calc'] = ""
        await update.message.reply_text("–û—á–∏—â–µ–Ω–æ")
    
    elif "–ø—Ä–∏–≤–µ—Ç" in text.lower():
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}!")
    
    elif "–∫–∞–∫ –¥–µ–ª–∞" in text.lower():
        await update.message.reply_text("–ù–æ—Ä–º–∞–ª—å–Ω–æ, –∞ —É —Ç–µ–±—è?")
    
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "game_guess":
        await query.edit_message_text("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3. –£–≥–∞–¥—ã–≤–∞–π!")
        context.user_data['secret'] = 2
    
    elif data == "game_rps":
        keyboard = [
            [InlineKeyboardButton("‚úä", callback_data="rps_rock")],
            [InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors")],
            [InlineKeyboardButton("‚úã", callback_data="rps_paper")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏:", reply_markup=reply_markup)
    
    elif data.startswith("rps_"):
        import random
        user_choice = data.split("_")[1]
        bot_choice = random.choice(['rock', 'scissors', 'paper'])
        
        if user_choice == bot_choice:
            result = "–ù–∏—á—å—è!"
        elif (user_choice == 'rock' and bot_choice == 'scissors') or \
             (user_choice == 'scissors' and bot_choice == 'paper') or \
             (user_choice == 'paper' and bot_choice == 'rock'):
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
        else:
            result = "–Ø –≤—ã–∏–≥—Ä–∞–ª!"
        
        choices = {'rock': '‚úä', 'scissors': '‚úåÔ∏è', 'paper': '‚úã'}
        await query.edit_message_text(f"–¢—ã: {choices[user_choice]}\n–Ø: {choices[bot_choice]}\n{result}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞")
        return
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("time", time_command))
    app.add_handler(CommandHandler("game", game_command))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    app.add_error_handler(error_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()